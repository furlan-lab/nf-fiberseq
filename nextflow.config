params {
    sample_sheet = '/fh/fast/furlan_s/user/tho/nextflow/samplesheet.csv'
    out_dir = '/fh/working/furlan_s/tho/fiberseq'
    reference = '/fh/fast/furlan_s/user/tho/nextflow/GCA_000001405.15_GRCh38_no_alt_analysis_set.fasta'
    reference_index = '/fh/fast/furlan_s/user/tho/nextflow/GCA_000001405.15_GRCh38_no_alt_analysis_set.fasta.fai'
    temp_dir = '/fh/working/furlan_s/tho/temp'

    bam_merge = true
    ref_name = 'hg38'
    filter_flag = 260
    min_msp = 10
    min_ave_msp_size = 10
    min_contig_length = 0

    coverage_within_n_sd = 5
    min_coverage = 4
    min_per_acc_peak = 0.25
    min_frac_accessible = 0
    max_frac_overlap = 0.2
    max_peak_fdr= 0.05
    min_fire_fdr= 0.10

    if (ref_name == "hg38" ){
        bed_excludes = ['./annotations/hg38.blacklist.ENCFF356LFX.bed.gz',
                        './annotations/hg38.gap.bed.gz',
                        './annotations/SDs.merged.hg38.bed.gz']}
    nzooms = 10

    haps = ["all", "hap1", "hap2", "unk"]
    not_unk = ["all", "hap1", "hap2"] 
    all_only = ["all"]
    el_types = ["fire", "linker", "nucleosome"]
    bw_types = ["log_FDR"]
    
    get_hap_col_suffix = { haplotype ->
    if (haplotype == "all") return ""
    else return "_${haplotype}"}

    fire_peak_as = "./templates/fire_peak.as"
    bed9_as = "./templates/bed9.as"
    fire_description_template = "./templates/fire-description.html"
    
    max_cpus = 32
    max_memory = '240.GB'

}

workDir = '/hpc/temp/furlan_s/tho/fiberseq'

conda.enabled = true

apptainer {
    enabled = true
    autoMounts = true
    runOptions = '--containall -B \$TMPDIR'
}

profiles {
    local {
        process.executor = 'local'
    }
    
    slurm {
        process.executor = 'slurm'
        process.queue = 'campus-new'
    }
}

process {
    apptainer.enabled = true
    withLabel: big_mem {
        cpus = { check_max( 24    * task.attempt, 'cpus'   ) }
        memory = { check_max( 120.GB * task.attempt, 'memory' ) }}
}

executor.retry.maxAttempt = 3
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
report {
    enabled = true
    file    = "${workDir}/nf_report_${trace_timestamp}.html"
}

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
